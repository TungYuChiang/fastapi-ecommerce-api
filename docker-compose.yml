version: '3.8'

services:
  # PostgreSQL 數據庫
  postgres:
    image: postgres:15
    container_name: ecommerce-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis 用於 Celery 後端和緩存
  redis:
    image: redis:7
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ 用於消息隊列
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ecommerce-rabbitmq
    ports:
      - "5672:5672"   # AMQP 協議端口
      - "15672:15672" # 管理界面端口
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI 應用程式
  api:
    build: .
    container_name: ecommerce-api
    command: uvicorn main:app --host ${APP_HOST} --port ${APP_PORT} --reload
    volumes:
      - .:/app
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build: .
    container_name: ecommerce-celery-worker
    command: celery -A app.celery_app worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    restart: unless-stopped

  # RabbitMQ 消費者
  rabbitmq_consumer:
    build: .
    container_name: ecommerce-rabbitmq-consumer
    command: python consumer.py --queue all
    volumes:
      - .:/app
    depends_on:
      api:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: 